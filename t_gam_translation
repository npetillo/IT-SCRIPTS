#!/bin/bash

#alias############################

gam() {
  "/Users/nick/bin/gam/gam" "$@"
}

gamum() {
  "/Users/nick/bin/gam2/gam/gam" "$@"
}

###############################
#Distro Lists
################################

ALLAGENCY=allagency@translationllc.com
ALLTRANSLATION=alltranslationteam@translationllc.com
ALL=all@translationllc.com


##################################
#On-Boarding
##################################



echoemail(){
  printf "Hi $FIRSTNAME, I have setup an @translationllc.com email for you, see below on how to get logged in\nGo to mail.google.com\nUsername: $EMAIL\nTemporary Password: Translation10jay\nYou will be prompted to change your password on first login" | pbcopy
}

echogroups(){
	gam info user "$EMAIL" | sed -ne '/Groups/,$ p'
}


cmd_create_user() {
  declare EMAIL="$1" FIRSTNAME="$2" LASTNAME="$3"
  gam create user "$EMAIL" firstname "$FIRSTNAME" lastname "$LASTNAME" password "Translation10jay" changepassword on
#stores backup codes in variable
#backupcodes=$(gam user "$EMAIL" update backupcodes)

#Standard Distro Additions
 gam update group "$ALLTRANSLATION" add member "$EMAIL"
 gam update group "$ALLAGENCY" add member "$EMAIL"
gam update group "$ALL" add member "$EMAIL"


if [[ "$EMAIL" == *unitedmasters* ]]
then gam update group all.um.team@unitedmasters.com add member "$EMAIL"
else echo "OK"
fi


if [[ "$EMAIL" == *unitedmasters* ]]
then echo "Is this UM user in NY or SF"
read -r location
else echo "OK"
fi

if [[ "$location" == "NY" ]]; then
  gam update group um.nyc@translationllc.com add member "$EMAIL"
fi 
if [[ "$location" == "SF" ]]; then 
    gam update group sf@unitedmasters.com add member "$EMAIL"
else echo "OK"
fi

echoemail
echogroups
}

cmd_resource_cal(){
declare EMAIL=$1
array=$(gam print resources | awk -F ',' '{print $3}')
for i in ${array[@]};do
  gam calendar "$i" update editor "$EMAIL"
done
}





cmd_groupadd(){
	declare EMAIL="$1" GROUP="$2"
	gam update group "$GROUP" add member "$EMAIL"

}

cmd_groupcreate(){
  declare EMAIL=$1 NAME="$2"
  gam create group "$EMAIL" name "$NAME"

}

cmd_groupremove(){
	declare EMAIL="$1" GROUP="$2"
	gam update group "$GROUP" remove user "$EMAIL"
}

cmd_groupexport(){
  declare GROUP=$1
  gam print group-members group "$GROUP" membernames > ~/$GROUP.csv
  echo "$GROUP" has been exported to your home folder
  }


  cmd_password(){
	declare EMAIL="$1" 
	gam update user "$EMAIL" password "Translation10jay" changepassword on 
}


cmd_forward(){
declare EMAIL="$1" NEWEMAIL="$2"
gam user "$EMAIL" add forwardingaddress "$NEWEMAIL"
gam user "$EMAIL" forward on "$NEWEMAIL" keep
}


cmd_termuser(){
declare EMAIL="$1"
array=$(gam info user "$EMAIL" | sed -ne '/Groups/,$ p' |cut -d "<" -f2 | cut -d ">" -f1 | grep -EiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b')

for i in ${array[@]}; do
  gam update group "$i" remove user "$EMAIL"
done

gam update user "$EMAIL" password random
gam user "$EMAIL" deprovision

echo "Please login to admin.google.com and manually disable 2FA"

echo "Do you need to setup a forward [y,n]"
read -r answer

if [[ "$answer" == y ]]; then
  echo "Enter email of destination address"
  read -r destemail
gam user "$EMAIL" add forwardingaddress "$destemail"
gam user "$EMAIL" forward on "$destemail" keep
else
  echo "OK"
fi

  echo "Do you need to transfer Google Docs"
  read -r googledocsanswer

  if [[ "$googledocsanswer" == y ]]; then
    echo "enter email of destination"
    read -r gdrivedestination
    gam create datatransfer "$EMAIL" gdrive "$gdrivedestination" privacy_level shared,private
  else
    echo "OK"
fi
}

cmd_help(){
  printf "Available Commands:\ncreate-user <email> <firstname> <lastname>\ndelete-user <email>\npassword <email>\nbackupcodes <email>\nadd-group <email> <group>\nremove-group <email> <group>\npass-back <email> Changes password to default password and generates new backupcodes\ncreate-group <email> <group name> PUT GROUP NAME IN QUOTES\nexport-group <groupname>\ngit-invite <github username>\nterm-user <email>\ndrive-transfer <OLD USER EMAIL> <NEW USER EMAIL>\nhelp Shows this"
}


cmd_newsletter_export(){
declare FOLDER="$HOME/Desktop/NEWSLETTER" today=$(date +%Y_%m_%d__%H_%M_%S)
mkdir -p $HOME/Desktop/NEWSLETTER 
rm -rf  $HOME/Desktop/NEWSLETTER/*
gam print group-members group allagency | awk -F "," {'print $3'} > "$FOLDER/translation_$today.csv"
gamum print group-members group all.um.team | awk -F "," {'print $5'} > "$FOLDER/unitedmasters_$today.csv"

}




cmd_bulk-group-add(){
declare GROUP="$1"
echo "Enter Users Emails"
read -a userarray

for i in ${userarray[@]}
do 
gam update group "$GROUP" add member "$i"
done
}

cmd_bulk-group-remove(){
  declare GROUP="$1"
  echo "Enter Users Emails"
  read -a userarray

  for i in ${userarray[@]}
  do 
  gam update group "$GROUP" remove user "$i"
 done
}


cmd_slack_invite(){
	declare EMAIL="$1"
curl -X POST \
  https://slack.com/api/users.admin.invite \
  -H "Authorization: Bearer $SLACKTOKEN" \
  -H 'Cache-Control: no-cache' \
  -F email="$EMAIL"
}

cmd_signature(){
  declare EMAIL="$1"
  gam user "$EMAIL" signature file signature.html html
}


cmd_alias(){
  declare EMAIL="$1" ALIAS="$2"
  gam create alias "$ALIAS" user "$EMAIL"
}

cmd_delete_user(){
	declare EMAIL="$1"
	printf "Are you sure you want to delete the user $EMAIL? (y,n)"
	read deleteanswer
	if [[ $deleteanswer == y ]]; then
		gam delete user "$EMAIL"
	else
		printf "OK"
	fi
}

cmd_search(){
  declare EMAIL="$1"
  gam print users query "$EMAIL"
}

cmd_calaccess(){
  declare EMAIL="$1" USER="$2"
  gam calendar "$EMAIL" add editor "$USER"

}


cmd_data_transfer(){
	declare OLDEMAIL="$1" NEWEMAIL="$2"
	gam create datatransfer "$OLDEMAIL" gdrive "$NEWEMAIL" privacy_level shared,private
}


cmd_delegate(){
  declare OLDEMAIL="$1" NEWEMAIL="$2"
  gam user "$OLDEMAIL" delegate to "$NEWEMAIL"
}


############Interactive Mode##########################

cmd_interactive(){

printf "Welcome to Interactive Mode"

printf "Choose from the following options:\n1.)Create a User\n2.)Delete a User\n3.)Term a User\n4.)Send a Slack Invite\n5.)Create a Distro Group\n6.)Add Members to a Group\n7.)Remove Members from Group\n8.)Reset a Password\n9.)Setup a Forward\n10.)Do a Drive Transfer\n11.)Resource Calendars\n12.)Search for a User\n13.)Create an Alias\n"


read -r answer

if [[ "$answer" == "1" ]]; then
  cmd_int_create
fi
if [[ "$answer" == "2" ]]; then
  cmd_int_delete
fi
if [[ "$answer" == "3" ]]; then
  cmd_int_term
fi
if [[ "$answer" == "4" ]]; then
  cmd_int_slack
fi
if [[ "$answer" == "5" ]]; then
  cmd_int_group_create
fi
if [[ "$answer" == "6" ]]; then
  cmd_int_group_add
fi
if [[ "$answer" == "7" ]]; then
  cmd_int_group_remove
fi
if [[ "$answer" == "8" ]]; then
  cmd_int_password
fi
if [[ "$answer" == "9" ]]; then
  cmd_int_forward
fi
if [[ "$answer" == "10" ]]; then
  cmd_int_drivetransfer
fi
if [[ "$answer" == "11" ]]; then
  cmd_int_resource-cals
fi
if [[ "$answer" == "12" ]]; then
  cmd_int_search
fi
if [[ "$answer" == "13" ]]; then
  cmd_int_alias
fi
}




cmd_int_create(){
  printf "Enter email address of new user\n"
  read -r EMAIL
  printf "Enter First Name\n"
  read -r FIRSTNAME
  printf "Enter Last Name\n"
  read -r LASTNAME

  gam create user "$EMAIL" firstname "$FIRSTNAME" lastname "$LASTNAME" password "Translation10jay" changepassword on
  gam update group "$ALLTRANSLATION" add member "$EMAIL"
  gam update group "$ALLAGENCY" add member "$EMAIL"

if [[ "$EMAIL" == *unitedmasters* ]]
then gam update group all.um.team@unitedmasters.com add member "$EMAIL"
fi


if [[ "$EMAIL" == *unitedmasters* ]]
then echo "Is this UM user in NY or SF"
read -r location
fi

if [[ "$location" == "NY" ]]; then
  gam update group um.nyc@translationllc.com add member "$EMAIL"
fi 
if [[ "$location" == "SF" ]]; then 
    gam update group sf@unitedmasters.com add member "$EMAIL"
fi

echoemail
echogroups


}



cmd_int_delete(){
    printf "Enter email address of the user you want to DELETE\n"
    read -r EMAIL
    printf "Are you sure you want to delete the user $EMAIL? (y,n)\n"
    read deleteanswer

  if [[ $deleteanswer == y ]]; then
    gam delete user "$EMAIL"
  else
    printf "OK Goodbye"
  fi


}


cmd_int_term(){
  printf "Enter email address of the user you want to TERM\n"
  read -r EMAIL
 
array=$(gam info user "$EMAIL" | sed -ne '/Groups/,$ p' |cut -d "<" -f2 | cut -d ">" -f1 | grep -EiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b')

for i in ${array[@]}; do
  gam update group "$i" remove user "$EMAIL"
done

gam update user "$EMAIL" password random
gam user "$EMAIL" deprovision

echo "Please login to admin.google.com and manually disable 2FA"

echo "Do you need to setup a forward [y,n]"
read -r answer

if [[ "$answer" == y ]]; then
  echo "Enter email of destination address"
  read -r destemail
gam user "$EMAIL" add forwardingaddress "$destemail"
gam user "$EMAIL" forward on "$destemail" keep
else
  echo "OK"
fi

  echo "Do you need to transfer Google Docs"
  read -r googledocsanswer

  if [[ "$googledocsanswer" == y ]]; then
    echo "enter email of destination"
    read -r gdrivedestination
    gam create datatransfer "$EMAIL" gdrive "$gdrivedestination" privacy_level shared,private
  else
    echo "OK"
fi


}


cmd_int_slack(){
  printf "Enter email address for Slack invite\n"
  read -r EMAIL

curl -X POST \
  https://slack.com/api/users.admin.invite \
  -H "Authorization: Bearer $SLACKTOKEN" \
  -H 'Cache-Control: no-cache' \
  -F email="$EMAIL"
}


cmd_int_group_create(){

printf "Enter the Distro Group Email\n"
read -r EMAIL
printf "Enter the Name of the Group\n"
read -r NAME
  gam create group "$EMAIL" name "$NAME"
}

cmd_int_group_add(){
  printf "Who do you want to add (email address)\n"
  read -r EMAIL
  printf "What group would you like to add them to?\n"
  read -r GROUP

  gam update group "$GROUP" add member "$EMAIL"

}

cmd_int_group_remove(){
printf "Who do you want to remove (email address)\n"
read -r EMAIL
printf "What group are you removing them from?\n"
read -r GROUP

gam update group "$GROUP" remove user "$EMAIL"

}


cmd_int_password(){
printf "Enter the email for password reset\n"
read -r EMAIL
gam update user "$EMAIL" password "Translation10jay" changepassword on 
printf "Password has been changed to Translation10jay\n"

}


cmd_int_forward(){
printf "Enter the email that needs to be forwarded\n"
read -r EMAIL
printf "Enter the destination email address\n"
read -r NEWEMAIL


gam user "$EMAIL" add forwardingaddress "$NEWEMAIL"
gam user "$EMAIL" forward on "$NEWEMAIL" keep

}

cmd_int_drivetransfer(){
printf "Enter the source email for Drive Transfer\n"
read -r OLDEMAIL
printf "Enter the destination email for Drive Transfer\n"
read -r NEWEMAIL

gam create datatransfer "$OLDEMAIL" gdrive "$NEWEMAIL" privacy_level shared,private

}

cmd_int_resource-cals(){
printf "Who needs access to resource calendars?\n"
read -r EMAIL

array=$(gam print resources | awk -F ',' '{print $3}')
for i in ${array[@]};do
  gam calendar "$i" update editor "$EMAIL"
done

}


cmd_int_search(){
  printf "Enter the name or part of name of the user you are looking for\n"
  read -r EMAIL
  gam print users query "$EMAIL"
}

cmd_int_alias(){
  printf "Enter the users current email address\n"
  read -r EMAIL
  printf "Enter the desired alias\n"
  read -r ALIAS
  gam create alias "$ALIAS" user "$EMAIL"
}


main() {
declare CMD="$1" EMAIL="$2"
shift 1

  [[ "$CMD" == "create-user" ]] && cmd_create_user "$@"
  [[ "$CMD" == "delete-user" ]] && cmd_delete_user "$@"
  [[ "$CMD" == "password"    ]] && cmd_password "$@"
  [[ "$CMD" == "backupcodes" ]] && cmd_backupcodes "$@"
  [[ "$CMD" == "add-group"   ]] &&  cmd_groupadd "$@"
  [[ "$CMD" == "remove-group" ]] &&  cmd_groupremove "$@"
  [[ "$CMD" == "create-group" ]] &&  cmd_groupcreate "$@"
  [[ "$CMD" == "export-group" ]] &&  cmd_groupexport "$@"
  [[ "$CMD" == "slack-invite" ]] &&  cmd_slack_invite "$@"
  [[ "$CMD" == "pass-back" ]] &&  cmd_pass_backupcodes "$@"
  [[ "$CMD" == "term-user"  ]] && cmd_termuser "$@"
  [[ "$CMD" == "help"       ]] && cmd_help "$@"
  [[ "$CMD" == "bulk-group-add" ]] && cmd_bulk-group-add "$@"
  [[ "$CMD" == "bulk-group-remove" ]] && cmd_bulk-group-remove "$@"
  [[ "$CMD" == "bulk-github" ]] && cmd_bulk-git-add-cx "$@"
  [[ "$CMD" == "copy-user" ]] && cmd_copyuser "$@"
  [[ "$CMD" == "response" ]] && cmd_echoemail "$@"
  [[ "$CMD" == "drive-transfer" ]] && cmd_data_transfer "$@"
  [[ "$CMD" == "resource-calendar" ]] && cmd_resource_cal "$@"
  [[ "$CMD" == "forward" ]] && cmd_forward "$@"
  [[ "$CMD" == "s"       ]] && cmd_search "$@"
  [[ "$CMD" == "newsletter" ]] && cmd_newsletter_export "$@"
  [[ "$CMD" == "i" ]] && cmd_interactive "$@"
  [[ "$CMD" == "alias" ]] && cmd_alias "$@"
  [[ "$CMD" == "delegate" ]] && cmd_delegate "$@"
  [[ "$CMD" == "signature" ]] && cmd_signature "$@"
  [[ "$CMD" == "cal-access" ]] && cmd_calaccess "$@"


#  [[ "$CMD" == "show-user"   ]] && showuser "$@"
#  [[ "$CMD" == "lock-user"   ]] && lock_user "$@"
}

main "$@"

